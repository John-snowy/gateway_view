{"remainingRequest":"/home/john/GoProjects/go_gateway_view/node_modules/thread-loader/dist/cjs.js!/home/john/GoProjects/go_gateway_view/node_modules/babel-loader/lib/index.js!/home/john/GoProjects/go_gateway_view/src/router/index.js","dependencies":[{"path":"/home/john/GoProjects/go_gateway_view/src/router/index.js","mtime":1610032545363},{"path":"/home/john/GoProjects/go_gateway_view/node_modules/cache-loader/dist/cjs.js","mtime":1608128773084},{"path":"/home/john/GoProjects/go_gateway_view/node_modules/thread-loader/dist/cjs.js","mtime":1608128773256},{"path":"/home/john/GoProjects/go_gateway_view/node_modules/babel-loader/lib/index.js","mtime":1608128773084}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCBWdWUgZnJvbSAndnVlJzsKaW1wb3J0IFJvdXRlciBmcm9tICd2dWUtcm91dGVyJzsKVnVlLnVzZShSb3V0ZXIpOwovKiBMYXlvdXQgKi8KCmltcG9ydCBMYXlvdXQgZnJvbSAnQC9sYXlvdXQnOwovKioKICogTm90ZTogc3ViLW1lbnUgb25seSBhcHBlYXIgd2hlbiByb3V0ZSBjaGlsZHJlbi5sZW5ndGggPj0gMQogKiBEZXRhaWwgc2VlOiBodHRwczovL3BhbmppYWNoZW4uZ2l0aHViLmlvL3Z1ZS1lbGVtZW50LWFkbWluLXNpdGUvZ3VpZGUvZXNzZW50aWFscy9yb3V0ZXItYW5kLW5hdi5odG1sCiAqCiAqIGhpZGRlbjogdHJ1ZSAgICAgICAgICAgICAgICAgICBpZiBzZXQgdHJ1ZSwgaXRlbSB3aWxsIG5vdCBzaG93IGluIHRoZSBzaWRlYmFyKGRlZmF1bHQgaXMgZmFsc2UpCiAqIGFsd2F5c1Nob3c6IHRydWUgICAgICAgICAgICAgICBpZiBzZXQgdHJ1ZSwgd2lsbCBhbHdheXMgc2hvdyB0aGUgcm9vdCBtZW51CiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2V0IGFsd2F5c1Nob3csIHdoZW4gaXRlbSBoYXMgbW9yZSB0aGFuIG9uZSBjaGlsZHJlbiByb3V0ZSwKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0IHdpbGwgYmVjb21lcyBuZXN0ZWQgbW9kZSwgb3RoZXJ3aXNlIG5vdCBzaG93IHRoZSByb290IG1lbnUKICogcmVkaXJlY3Q6IG5vUmVkaXJlY3QgICAgICAgICAgIGlmIHNldCBub1JlZGlyZWN0IHdpbGwgbm8gcmVkaXJlY3QgaW4gdGhlIGJyZWFkY3J1bWIKICogbmFtZToncm91dGVyLW5hbWUnICAgICAgICAgICAgIHRoZSBuYW1lIGlzIHVzZWQgYnkgPGtlZXAtYWxpdmU+IChtdXN0IHNldCEhISkKICogbWV0YSA6IHsKICAgIHJvbGVzOiBbJ2FkbWluJywnZWRpdG9yJ10gICAgY29udHJvbCB0aGUgcGFnZSByb2xlcyAoeW91IGNhbiBzZXQgbXVsdGlwbGUgcm9sZXMpCiAgICB0aXRsZTogJ3RpdGxlJyAgICAgICAgICAgICAgIHRoZSBuYW1lIHNob3cgaW4gc2lkZWJhciBhbmQgYnJlYWRjcnVtYiAocmVjb21tZW5kIHNldCkKICAgIGljb246ICdzdmctbmFtZScvJ2VsLWljb24teCcgdGhlIGljb24gc2hvdyBpbiB0aGUgc2lkZWJhcgogICAgbm9DYWNoZTogdHJ1ZSAgICAgICAgICAgICAgICBpZiBzZXQgdHJ1ZSwgdGhlIHBhZ2Ugd2lsbCBubyBiZSBjYWNoZWQoZGVmYXVsdCBpcyBmYWxzZSkKICAgIGFmZml4OiB0cnVlICAgICAgICAgICAgICAgICAgaWYgc2V0IHRydWUsIHRoZSB0YWcgd2lsbCBhZmZpeCBpbiB0aGUgdGFncy12aWV3CiAgICBicmVhZGNydW1iOiBmYWxzZSAgICAgICAgICAgIGlmIHNldCBmYWxzZSwgdGhlIGl0ZW0gd2lsbCBoaWRkZW4gaW4gYnJlYWRjcnVtYihkZWZhdWx0IGlzIHRydWUpCiAgICBhY3RpdmVNZW51OiAnL2V4YW1wbGUvbGlzdCcgIGlmIHNldCBwYXRoLCB0aGUgc2lkZWJhciB3aWxsIGhpZ2hsaWdodCB0aGUgcGF0aCB5b3Ugc2V0CiAgfQogKi8KCi8qKgogKiBjb25zdGFudFJvdXRlcwogKiBhIGJhc2UgcGFnZSB0aGF0IGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiByZXF1aXJlbWVudHMKICogYWxsIHJvbGVzIGNhbiBiZSBhY2Nlc3NlZAogKi8KCmV4cG9ydCB2YXIgY29uc3RhbnRSb3V0ZXMgPSBbewogIHBhdGg6ICcvcmVkaXJlY3QnLAogIGNvbXBvbmVudDogTGF5b3V0LAogIGhpZGRlbjogdHJ1ZSwKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICcvcmVkaXJlY3QvOnBhdGgoLiopJywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gaW1wb3J0KCdAL3ZpZXdzL3JlZGlyZWN0L2luZGV4Jyk7CiAgICB9CiAgfV0KfSwgewogIHBhdGg6ICcvbG9naW4nLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9sb2dpbi9pbmRleCcpOwogIH0sCiAgaGlkZGVuOiB0cnVlCn0sIHsKICBwYXRoOiAnL2F1dGgtcmVkaXJlY3QnLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9sb2dpbi9hdXRoLXJlZGlyZWN0Jyk7CiAgfSwKICBoaWRkZW46IHRydWUKfSwgewogIHBhdGg6ICcvNDA0JywKICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3MvZXJyb3ItcGFnZS80MDQnKTsKICB9LAogIGhpZGRlbjogdHJ1ZQp9LCB7CiAgcGF0aDogJy80MDEnLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9lcnJvci1wYWdlLzQwMScpOwogIH0sCiAgaGlkZGVuOiB0cnVlCn0sIHsKICBwYXRoOiAnLycsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgcmVkaXJlY3Q6ICcvZGFzaGJvYXJkJywKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICdkYXNoYm9hcmQnLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3MvZGFzaGJvYXJkL2luZGV4Jyk7CiAgICB9LAogICAgbmFtZTogJ0Rhc2hib2FyZCcsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAnRGFzaGJvYXJkJywKICAgICAgaWNvbjogJ2Rhc2hib2FyZCcsCiAgICAgIGFmZml4OiB0cnVlCiAgICB9CiAgfV0KfSwgewogIHBhdGg6ICcvc2VydmljZScsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgcmVkaXJlY3Q6ICcvc2VydmljZS9saXN0JywKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICdsaXN0JywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gaW1wb3J0KCdAL3ZpZXdzL3NlcnZpY2UvbGlzdCcpOwogICAgfSwKICAgIG5hbWU6ICfmnI3liqHliJfooagnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ+acjeWKoeWIl+ihqCcsCiAgICAgIGljb246ICdjb21wb25lbnQnLAogICAgICBhZmZpeDogdHJ1ZQogICAgfQogIH0sIHsKICAgIHBhdGg6ICdzZXJ2aWNlX2NyZWF0ZV9odHRwJywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gaW1wb3J0KCdAL3ZpZXdzL3NlcnZpY2UvaHR0cCcpOwogICAgfSwKICAgIG5hbWU6ICfliJvlu7pIVFRQ5pyN5YqhJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICfliJvlu7pIVFRQ5pyN5YqhJywKICAgICAgaWNvbjogJ2NvbXBvbmVudCcsCiAgICAgIGFmZml4OiBmYWxzZQogICAgfSwKICAgIGhpZGRlbjogdHJ1ZQogIH0sIHsKICAgIHBhdGg6ICdzZXJ2aWNlX2VkaXRfaHR0cC86aWQoXFxkKyknLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3Mvc2VydmljZS9odHRwJyk7CiAgICB9LAogICAgbmFtZTogJ+S/ruaUuUhUVFDmnI3liqEnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ+S/ruaUuUhUVFDmnI3liqEnLAogICAgICBpY29uOiAnY29tcG9uZW50JywKICAgICAgYWZmaXg6IGZhbHNlCiAgICB9LAogICAgaGlkZGVuOiB0cnVlCiAgfSwgewogICAgcGF0aDogJ3NlcnZpY2VfY3JlYXRlX3RjcCcsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9zZXJ2aWNlL3RjcCcpOwogICAgfSwKICAgIG5hbWU6ICfliJvlu7pUQ1DmnI3liqEnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ+WIm+W7ulRDUOacjeWKoScsCiAgICAgIGljb246ICdjb21wb25lbnQnLAogICAgICBhZmZpeDogZmFsc2UKICAgIH0sCiAgICBoaWRkZW46IHRydWUKICB9LCB7CiAgICBwYXRoOiAnc2VydmljZV9lZGl0X3RjcC86aWQoXFxkKyknLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3Mvc2VydmljZS90Y3AnKTsKICAgIH0sCiAgICBuYW1lOiAn5L+u5pS5VENQ5pyN5YqhJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICfkv67mlLlUQ1DmnI3liqEnLAogICAgICBpY29uOiAnY29tcG9uZW50JywKICAgICAgYWZmaXg6IGZhbHNlCiAgICB9LAogICAgaGlkZGVuOiB0cnVlCiAgfSwgewogICAgcGF0aDogJ3NlcnZpY2VfY3JlYXRlX2dycGMnLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3Mvc2VydmljZS9ncnBjJyk7CiAgICB9LAogICAgbmFtZTogJ+WIm+W7ukdSUEPmnI3liqEnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ+WIm+W7ukdSUEPmnI3liqEnLAogICAgICBpY29uOiAnY29tcG9uZW50JywKICAgICAgYWZmaXg6IGZhbHNlCiAgICB9LAogICAgaGlkZGVuOiB0cnVlCiAgfSwgewogICAgcGF0aDogJ3NlcnZpY2VfZWRpdF9ncnBjLzppZChcXGQrKScsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9zZXJ2aWNlL2dycGMnKTsKICAgIH0sCiAgICBuYW1lOiAn5L+u5pS5R1JQQ+acjeWKoScsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAn5L+u5pS5R1JQQ+acjeWKoScsCiAgICAgIGljb246ICdjb21wb25lbnQnLAogICAgICBhZmZpeDogZmFsc2UKICAgIH0sCiAgICBoaWRkZW46IHRydWUKICB9LCB7CiAgICBwYXRoOiAnc2VydmljZV9zdGF0LzppZChcXGQrKScsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9zZXJ2aWNlL3N0YXQnKTsKICAgIH0sCiAgICBuYW1lOiAn5pyN5Yqh57uf6K6hJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICfmnI3liqHnu5/orqEnLAogICAgICBpY29uOiAnY29tcG9uZW50JywKICAgICAgYWZmaXg6IGZhbHNlCiAgICB9LAogICAgaGlkZGVuOiB0cnVlCiAgfV0KfSwgewogIHBhdGg6ICcvYXBwJywKICByZWRpcmVjdDogJy9hcHAvYXBwX2xpc3QnLAogIGNvbXBvbmVudDogTGF5b3V0LAogIG5hbWU6ICfnp5/miLfnrqHnkIYnLAogIG1ldGE6IHsKICAgIHRpdGxlOiAn56ef5oi3566h55CGJywKICAgIGljb246ICd1c2VyJwogIH0sCiAgY2hpbGRyZW46IFt7CiAgICBwYXRoOiAnYXBwX2xpc3QnLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3MvYXBwL2FwcF9saXN0Jyk7CiAgICB9LAogICAgbmFtZTogJ+enn+aIt+WIl+ihqCcsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAn56ef5oi35YiX6KGoJywKICAgICAgaWNvbjogJ3VzZXInLAogICAgICBhZmZpeDogZmFsc2UKICAgIH0KICB9LCB7CiAgICBwYXRoOiAnYXBwX2NyZWF0ZScsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9hcHAvYXBwJyk7CiAgICB9LAogICAgbmFtZTogJ0NyZWF0ZUFwcCcsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAn5Yib5bu656ef5oi3JywKICAgICAgaWNvbjogJ2VkaXQnCiAgICB9LAogICAgaGlkZGVuOiB0cnVlCiAgfSwgewogICAgcGF0aDogJ2FwcF9lZGl0LzppZChcXGQrKScsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9hcHAvYXBwJyk7CiAgICB9LAogICAgbmFtZTogJ0VkaXRBcHAnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ+S/ruaUueenn+aItycKICAgIH0sCiAgICBoaWRkZW46IHRydWUKICB9LCB7CiAgICBwYXRoOiAnYXBwX3N0YXQvOmlkKFxcZCspJywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gaW1wb3J0KCdAL3ZpZXdzL2FwcC9zdGF0Jyk7CiAgICB9LAogICAgbmFtZTogJ0FwcFN0YXQnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ+enn+aIt+a1gemHj+e7n+iuoScsCiAgICAgIG5vQ2FjaGU6IHRydWUKICAgIH0sCiAgICBoaWRkZW46IHRydWUKICB9XQp9XTsKLyoqCiAqIGFzeW5jUm91dGVzCiAqIHRoZSByb3V0ZXMgdGhhdCBuZWVkIHRvIGJlIGR5bmFtaWNhbGx5IGxvYWRlZCBiYXNlZCBvbiB1c2VyIHJvbGVzCiAqLwoKZXhwb3J0IHZhciBhc3luY1JvdXRlcyA9IFtdOwoKdmFyIGNyZWF0ZVJvdXRlciA9IGZ1bmN0aW9uIGNyZWF0ZVJvdXRlcigpIHsKICByZXR1cm4gbmV3IFJvdXRlcih7CiAgICAvLyBtb2RlOiAnaGlzdG9yeScsIC8vIHJlcXVpcmUgc2VydmljZSBzdXBwb3J0CiAgICBzY3JvbGxCZWhhdmlvcjogZnVuY3Rpb24gc2Nyb2xsQmVoYXZpb3IoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgeTogMAogICAgICB9OwogICAgfSwKICAgIHJvdXRlczogY29uc3RhbnRSb3V0ZXMKICB9KTsKfTsKCnZhciByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoKTsgLy8gRGV0YWlsIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzEyMzQjaXNzdWVjb21tZW50LTM1Nzk0MTQ2NQoKZXhwb3J0IGZ1bmN0aW9uIHJlc2V0Um91dGVyKCkgewogIHZhciBuZXdSb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoKTsKICByb3V0ZXIubWF0Y2hlciA9IG5ld1JvdXRlci5tYXRjaGVyOyAvLyByZXNldCByb3V0ZXIKfQpleHBvcnQgZGVmYXVsdCByb3V0ZXI7"},null]}